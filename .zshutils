#sudo pacman -S gzip unzip tar bzip2 unrar --needed
function ex ()
{
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xjf $1   ;;
			*.tar.gz)    tar xzf $1   ;;
			*.tar.xz)    tar xJf $1   ;;
			*.bz2)       bunzip2 $1   ;;
			*.rar)       unrar x $1     ;;
			*.gz)        gunzip $1    ;;
			*.tar)       tar xf $1    ;;
			*.tbz2)      tar xjf $1   ;;
			*.tgz)       tar xzf $1   ;;
			*.zip)       unzip $1     ;;
			*.Z)         uncompress $1;;
			*.7z)        7z x $1      ;;
			*)           echo "'$1' cannot be extracted via ex()" ;;
		esac
	else
		echo "$0: '$1' : No such file or directory"
	fi
}

function installfile(){
   pacman -Fq $1 | sudo pacman -S -
}

function mostUsedCmd(){
   local count=$1
   [[ -z $1 ]]  && 
      count="10"
	history 1 |
	awk '{CMD[$2]++;count++;}END { for (a in CMD) print CMD[a] " " int(CMD[a]/count*100) "% " a;}' | 
	column -c3 -s " " -t | 
	sort -nr | 
	nl |  
	head -n"$count"
}

function leastUsedCmd(){
   local count=$1
   [[ -z $1 ]]  && 
      count="10"
	history 1 |
	awk '{CMD[$2]++;count++;}END { for (a in CMD) print CMD[a] " " int(CMD[a]/count*100) "% " a;}' | 
	column -c3 -s " " -t | 
	sort -n | 
	tail -n"$count" |
	nl
}

#sudo pacman -S neovim --needed
function rasm(){
	objdump -dS --no-show-raw-insn --visualize-jumps --no-addresses -Mintel $@ | 
      #masm seems to work best with objdump's output
      nvim "+set ft=masm"
}

#sudo pacman -S pulseaudio --needed
function vol(){
   if [[ $# = 0 ]]; then
      pactl -- get-sink-volume 0
      return
   fi 
   pactl -- set-sink-volume 0 "$1%"
}

#to lazy to type project
function pro(){
   [[ -z $1 ]] && return
   mkdir -p $1/src
   cd $1
   cp ~/.config/pro/CMakeLists.txt .
   cp ~/.config/pro/.gitignore .
   cp ~/.config/pro/src/* ./src/
   cp ~/.clang-format .
   ln -sf build/compile_commands.json compile_commands.json
   cp ~/LICENSE .
}

#haha l vscode users
function code()   {
   if [[ $# = 0 ]] ; then
   cd ~/code/ &> /dev/null || 
   mkdir ~/code/ && 
   cd  ~/code/  
   return
   fi
   cd ~/code/$1 &> /dev/null || pro ~/code/$1 && cd  ~/code/$1
}

function codec()   {
   if [[ $# = 0 ]] ; then
   cd ~/codec/ &> /dev/null || 
   mkdir ~/codec/ && 
   cd  ~/codec/  
   return
   fi
   cd ~/codec/$1 &> /dev/null || pro ~/codec/$1 && cd  ~/codec/$1
}

function codew()   {
   if [[ $# = 0 ]] ; then
   cd ~/codew/ &> /dev/null || 
   mkdir ~/codew/ && 
   cd  ~/codew/  
   return
   fi
   cd ~/codew/$1 &> /dev/null || mkdir ~/codew/$1 && cd  ~/codew/$1
}



function mkasm(){
   clang $@ -S
}

function make(){
   [[ -f "src/CMakeLists.txt" ]] && /usr/bin/make $@ && 
   [[ -f main ]] && ./main  && return
   [[ $1 = "bear" ]] && 
   /usr/bin/bear -- /usr/bin/make clean all && return 
   /usr/bin/make $@
}
